@page
@model SRAUMOAR.Pages.administracion.EditarNotasGrupoModel

@{
    ViewData["Title"] = "Editar Notas - " + Model.NombreGrupo;
}

<style>
    .bg-gradient-admin {
        background: linear-gradient(90deg, #e3f2fd 0%, #f8f9fa 100%);
    }
    .table-modern th, .table-modern td {
        vertical-align: middle;
        border-top: none;
    }
    .table-modern thead th {
        border-bottom: 2px solid #1976d2;
        font-size: 1rem;
        letter-spacing: 0.03em;
    }
    .table-modern tbody tr {
        transition: background 0.15s;
    }
    .table-modern tbody tr:hover {
        background: #e3f2fd;
    }
    .nota-input {
        width: 80px;
        text-align: center;
    }
    .btn-edit-nota {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }
    .materia-header {
        background-color: #f8f9fa;
        border-left: 4px solid #1976d2;
    }
</style>

<div class="container-fluid py-4">
    <!-- Header -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="h3 mb-0">
                    <i class="bi bi-pencil-square me-2"></i>
                    Editar Notas - @Model.NombreGrupo
                </h1>
                <a asp-page="./EditarNotas" class="btn btn-light btn-sm">
                    <i class="bi bi-arrow-left me-1"></i>
                    Volver a grupos
                </a>
            </div>
        </div>
        <div class="card-body bg-light">
            <div class="row">
                <div class="col-md-3">
                    <strong>Carrera:</strong> @Model.NombreCarrera
                </div>
                <div class="col-md-3">
                    <strong>Total Estudiantes:</strong> @Model.EstudiantesConNotas.Count
                </div>
                <div class="col-md-3">
                    <strong>Materias:</strong> @Model.MateriasDelGrupo.Count
                </div>
                <div class="col-md-3">
                    <strong>Ciclo:</strong> @Model.CicloActual
                </div>
            </div>
        </div>
    </div>

    @if (Model.EstudiantesConNotas.Any())
    {
        @Html.AntiForgeryToken()
            
            @foreach (var materia in Model.MateriasDelGrupo)
            {
                <div class="card shadow-sm mb-4">
                    <div class="card-header materia-header">
                        <h5 class="mb-0">
                            <i class="bi bi-book me-2"></i>
                            @materia.NombreMateria
                            <small class="text-muted">(@materia.CodigoMateria)</small>
                        </h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-modern mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th style="width: 30%">Estudiante</th>
                                        @foreach (var actividad in Model.ActividadesAcademicas)
                                        {
                                            <th class="text-center" style="width: 15%">
                                                @actividad.Nombre
                                                <br>
                                                <small class="text-muted">(@actividad.Porcentaje%)</small>
                                            </th>
                                        }
                                        <th class="text-center" style="width: 10%">Promedio</th>
                                        <th class="text-center" style="width: 10%">Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var estudiante in Model.EstudiantesConNotas)
                                    {
                                        var materiaInscrita = estudiante.MateriasInscritas.FirstOrDefault(mi => mi.MateriasGrupoId == materia.MateriasGrupoId);
                                        if (materiaInscrita == null) continue;
                                        
                                        var notasMateria = estudiante.Notas.Where(n => n.MateriasInscritas.MateriasGrupoId == materia.MateriasGrupoId).ToList();
                                        
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <div class="ms-2">
                                                        <p class="fw-bold mb-0">@estudiante.NombreCompleto</p>
                                                        <small class="text-muted">@estudiante.CodigoEstudiante</small>
                                                    </div>
                                                </div>
                                            </td>
                                            
                                            @foreach (var actividad in Model.ActividadesAcademicas)
                                            {
                                                var nota = notasMateria.FirstOrDefault(n => n.ActividadAcademicaId == actividad.ActividadAcademicaId);
                                                var notaId = nota?.NotasId ?? 0;
                                                var valorNota = nota?.Nota ?? 0;
                                                
                                                <td class="text-center">
                                                    <div class="d-flex justify-content-center align-items-center">
                                                        <input type="number" 
                                                               id="nota-@estudiante.AlumnoId-@materia.MateriasGrupoId-@actividad.ActividadAcademicaId"
                                                               value="@valorNota.ToString("F1")" 
                                                               class="form-control nota-input" 
                                                               min="0" 
                                                               max="10" 
                                                               step="0.1" 
                                                               placeholder="0.0" />
                                                    </div>
                                                </td>
                                            }
                                            
                                            <td class="text-center">
                                                <span class="badge bg-primary fs-6" id="promedio-@estudiante.AlumnoId-@materia.MateriasGrupoId">
                                                    @estudiante.CalcularPromedioMateria(materia.MateriasGrupoId)
                                                </span>
                                            </td>
                                            
                                            <td class="text-center">
                                                <button type="button" 
                                                        class="btn btn-success btn-sm" 
                                                        onclick="guardarNotas(@estudiante.AlumnoId, @materia.MateriasGrupoId, @materiaInscrita.MateriasInscritasId)">
                                                    <i class="bi bi-check-circle"></i> Guardar
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }

            <div class="d-flex justify-content-between mt-4">
                <a asp-page="./EditarNotas" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-left me-2"></i>
                    Volver a grupos
                </a>
                <div class="text-muted">
                    <i class="bi bi-info-circle me-1"></i>
                    Usa el botón "Guardar" de cada fila para actualizar las notas individualmente
                </div>
            </div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-body text-center py-5">
                <i class="bi bi-people display-1 text-muted mb-3"></i>
                <h4 class="text-muted">No hay estudiantes en este grupo</h4>
                <p class="text-muted">No se encontraron estudiantes inscritos en las materias de este grupo.</p>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        // Función para guardar notas de un estudiante específico
        async function guardarNotas(alumnoId, materiasGrupoId, materiasInscritasId) {
            // Obtener el botón que fue clickeado
            const boton = document.querySelector(`button[onclick*="guardarNotas(${alumnoId}, ${materiasGrupoId}, ${materiasInscritasId})"]`);
            
            try {
                // Obtener todas las notas del estudiante para esta materia
                const notas = [];
                const actividades = @Html.Raw(Json.Serialize(Model.ActividadesAcademicas.Select(a => new { a.ActividadAcademicaId, a.Nombre })));
                
                actividades.forEach(actividad => {
                    const inputId = `nota-${alumnoId}-${materiasGrupoId}-${actividad.actividadAcademicaId}`;
                    const input = document.getElementById(inputId);
                    
                    if (input && input.value !== '') {
                        const valor = parseFloat(input.value);
                        if (!isNaN(valor) && valor >= 0 && valor <= 10) {
                            notas.push({
                                ActividadAcademicaId: actividad.actividadAcademicaId,
                                Nota: valor
                            });
                        } else {
                            input.classList.add('is-invalid');
                            throw new Error(`Nota inválida en ${actividad.nombre}: ${input.value}`);
                        }
                    }
                });
                
                if (notas.length === 0) {
                    alert('No hay notas válidas para guardar');
                    return;
                }
                
                // Mostrar indicador de carga
                const textoOriginal = boton.innerHTML;
                boton.innerHTML = '<i class="bi bi-hourglass-split"></i> Guardando...';
                boton.disabled = true;
                
                // Preparar datos para enviar
                const datos = {
                    AlumnoId: alumnoId,
                    MateriasGrupoId: materiasGrupoId,
                    MateriasInscritasId: materiasInscritasId,
                    Notas: notas
                };
                
                console.log('Datos a enviar:', datos);
                console.log('Token de verificación:', document.querySelector('input[name="__RequestVerificationToken"]')?.value);
                
                // Enviar datos al servidor
            const response = await fetch('/administracion/EditarNotasGrupo?handler=GuardarNotasEstudiante', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-XSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify(datos)
            });
                
                console.log('Respuesta del servidor:', response.status, response.statusText);
                
                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        // Actualizar promedio
                        actualizarPromedio(alumnoId, materiasGrupoId, notas);
                        
                        // Mostrar mensaje de éxito
                        mostrarMensaje('Notas guardadas exitosamente', 'success');
                        
                        // Marcar campos como válidos
                        actividades.forEach(actividad => {
                            const inputId = `nota-${alumnoId}-${materiasGrupoId}-${actividad.actividadAcademicaId}`;
                            const input = document.getElementById(inputId);
                            if (input) {
                                input.classList.remove('is-invalid');
                                input.classList.add('is-valid');
                            }
                        });
                    } else {
                        mostrarMensaje('Error: ' + result.message, 'error');
                    }
                } else {
                    mostrarMensaje('Error del servidor: ' + response.status, 'error');
                }
                
            } catch (error) {
                console.error('Error:', error);
                mostrarMensaje('Error: ' + error.message, 'error');
            } finally {
                // Restaurar botón
                boton.innerHTML = '<i class="bi bi-check-circle"></i> Guardar';
                boton.disabled = false;
            }
        }
        
        // Función para actualizar el promedio visualmente
        function actualizarPromedio(alumnoId, materiasGrupoId, notas) {
            // Esta función se puede implementar para calcular el promedio en el cliente
            // Por ahora solo actualizamos el badge
            const promedioElement = document.getElementById(`promedio-${alumnoId}-${materiasGrupoId}`);
            if (promedioElement) {
                promedioElement.innerHTML = '<i class="bi bi-hourglass-split"></i> Calculando...';
                // Aquí podrías calcular el promedio localmente o hacer otra llamada al servidor
            }
        }
        
        // Función para mostrar mensajes
        function mostrarMensaje(mensaje, tipo) {
            const alertClass = tipo === 'success' ? 'alert-success' : 'alert-danger';
            const icon = tipo === 'success' ? 'bi-check-circle' : 'bi-exclamation-circle';
            
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert ${alertClass} alert-dismissible fade show position-fixed`;
            alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            alertDiv.innerHTML = `
                <i class="bi ${icon} me-2"></i>
                ${mensaje}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(alertDiv);
            
            // Auto-remover después de 5 segundos
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.parentNode.removeChild(alertDiv);
                }
            }, 5000);
        }
        
        // Validación en tiempo real
        document.querySelectorAll('input[type="number"]').forEach(input => {
            input.addEventListener('input', function() {
                const value = parseFloat(this.value);
                
                this.classList.remove('is-invalid', 'is-valid');
                
                if (this.value !== '' && !isNaN(value)) {
                    if (value < 0 || value > 10) {
                        this.classList.add('is-invalid');
                    } else {
                        this.classList.add('is-valid');
                    }
                }
            });
        });
    </script>
}
